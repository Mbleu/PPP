/*Meaningless program that does nothing other than cause stack overflow errors due to infinte recursive loops.*/

struct X {							// (global scope) definition of a struct of type X where all members are public
	void f(int x)					// (member of X) inline definition of a function called f that returns nothing and takes an int as an argument
	{
		struct Y {					// (f(int)'s scope) definition of a struct of type Y where all members are public
			int f() { return 1; }	// (member of Y) inline definition of an overloaded function called f that returns an int and takes no arguments
									// (f()'s scope) return int value 1
			int m;					// (member of Y) definition of a variable called m of type int
		};

		int m;						// (f(int)'s scope) definition of a variable called m of type int
		m = x;						// (f(int)'s scope) set m's value to that of the parameter x
		Y m2;						// (f(int)'s scope) create an object called m2 of type Y using the default constuctor generated by the compiler
		return f(m2.f());			// (f(int)'s scope) return with f(int) calling itself in an infinite recursive loop
									// NOTE: this is legal despite the void type of f(int) because it calling a function that is also of type void, i.e. itself
	}

	int m;							// (member of X) definition of a variable called m of type int

	void g(int m)					// (member of X) inline definition of a function called g that returns nothing and takes an int as an argument
	{
		if (m) f(m + 2);			// (g(int)'s scope) if m is true, any value other than 0, call f(int)
		else g(m + 2);				// (g(int)'s scope) otherwise recursively call this function adding 2 to the value of m
									// NOTE: this will end in an infinite recursive loop whether with g(int) or f(int)
	}
	X() { }							// (member of X) inline definition of a default constructor for X
	void m3() {}					// (member of X) inline definition of a function called m3 that returns nothing and takes no arguments
	void main()						// (member of X) inline defintion of a function called main that returns nothing and takes no arguments
									// NOTE: this is not the main() function required by C++, that one must have an int return type and be in the global scope
	{
		X a;						// (main()'s scope) create an object called a of type X using the default constuctor
		a.f(2);						// (main()'s scope) call a's member function f(int) passing 2 as an argument
									// NOTE: this will end in an infinite recursive loop with f(int)
	}
};